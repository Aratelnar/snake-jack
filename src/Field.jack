class Field {
    field int _width;
    field int _height;
    field int _cellsize;
    field int _score;
    field Snake _snake;
    field Vector _apple;
    field Random rnd;

    constructor Field new(int width, int height, int cellsize){
        let _width = width;
        let _height = height;
        let _cellsize = cellsize;
        let _snake = Snake.fromHead(SnakeSegment.head(Vector.new(0, 0)));
        let _apple = Vector.new(-1, -1);
        let rnd = Random.new(18);
        let _score = 0;
        return this;
    }

    method boolean moveSnake(Vector v){
        var boolean valid, grow;
        var SnakeSegment seg;

        let seg = _snake.getTail();
        do FieldDrawer.drawSquare(this, seg.getPos(), false);
        let grow = checkAppleInFront(v);
        do _snake.move(v, grow);
        let seg = _snake.getHead();
        let valid = checkPos(seg.getPos());
        if (~valid){
            return false;
        }
        if (grow){
            let _score = _score + 1; 
            do generateApple();
        }
        do FieldDrawer.drawSquare(this, seg.getPos(), true);
        return true;
    }

    method boolean checkAppleInFront(Vector v){
        var SnakeSegment head;
        var Vector aheadPos;
        var boolean result;
        let head = _snake.getHead();
        let aheadPos = head.getPos();
        let aheadPos = aheadPos.copy();
        do aheadPos.add(v);
        let result = _apple.eq(aheadPos);
        do aheadPos.dispose();
        return result;
    }

    method boolean checkPos(Vector pos){
        var int x, y;

        let x = pos.getX();
        let y = pos.getY();
        if ((x < 0) | (y < 0)){
            return false;
        }
        if ((x > (_width - 1)) | (y > (_height - 1))){
            return false;
        }
        if (checkPosInSnake(pos)){
            return false;
        }
        return true;
    }

    method boolean checkPosInSnake(Vector pos){
        var SnakeSegment seg;
        var Vector segPos;
        let seg = _snake.getTail();
        while (~(seg = seg.getPrev())){
            let segPos = seg.getPos();
            if (segPos.eq(pos)){
                return true;
            }
            let seg = seg.getPrev();
        }
        return false;
    }

    method void generateApple(){
        var int x, y;
        do _apple.dispose();
        let x = Math2.mod(rnd.next(), _width);
        let y = Math2.mod(rnd.next(), _height);
        let _apple = Vector.new(x, y);
        while (checkPosInSnake(_apple)){
            do _apple.dispose();
            let x = Math2.mod(rnd.next(), _width);
            let y = Math2.mod(rnd.next(), _height);
            let _apple = Vector.new(x, y);
        }
        do FieldDrawer.drawApple(this, _apple);
        return;
    }

    method int getWidth(){
        return _width;
    }
    method int getHeight(){
        return _height;
    }
    method int getCellSize(){
        return _cellsize;
    }
    method int getScore(){
        return _score;
    }
    method Snake getSnake(){
        return _snake;
    }

    method void dispose(){
        do rnd.dispose();
        do _apple.dispose();
        do _snake.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
