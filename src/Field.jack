class Field {
    field int _width;
    field int _height;
    field int _cellsize;
    field Snake _snake;

    constructor Field new(int width, int height, int cellsize){
        let _width = width;
        let _height = height;
        let _cellsize = cellsize;
        let _snake = Snake.fromHead(SnakeSegment.head(Vector.new(0, 0)));
        return this;
    }

    method boolean moveSnake(Vector v){
        var boolean valid;
        var SnakeSegment seg;
        let seg = _snake.getTail();
        do FieldDrawer.drawSquare(this, seg.getPos(), false);
        do _snake.move(v, false);
        let seg = _snake.getHead();
        let valid = checkPos(seg.getPos());
        if (~valid){
            return false;
        }
        do FieldDrawer.drawSquare(this, seg.getPos(), true);
        return true;
    }

    method boolean checkPos(Vector pos){
        var int x, y;

        let x = pos.getX();
        let y = pos.getY();
        if ((x < 0) | (y < 0)){
            return false;
        }
        if ((x > (_width - 1)) | (y > (_height - 1))){
            return false;
        }
        if (checkPosInSnake(pos)){
            return false;
        }
        return true;
    }

    method boolean checkPosInSnake(Vector pos){
        var SnakeSegment seg;
        var Vector segPos;
        let seg = _snake.getTail();
        while (~(seg = seg.getPrev())){
            let segPos = seg.getPos();
            if (segPos.eq(pos)){
                return true;
            }
            let seg = seg.getPrev();
        }
        return false;
    }

    method int getWidth(){
        return _width;
    }
    method int getHeight(){
        return _height;
    }
    method int getCellSize(){
        return _cellsize;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
}
