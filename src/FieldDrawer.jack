class FieldDrawer {
    static int screenWidth;
    static int screenHeight;
    static int fieldCellSize;
    static int centerX;
    static int centerY;

    function void init(int sw, int sh, int cellSize){
        let screenWidth = sw;
        let screenHeight = sh;
        let fieldCellSize = cellSize;
        let centerX = Math.divide(screenWidth, 2);
        let centerY = Math.divide(screenHeight, 2);
        return;
    }

    function void drawGrid(Field f){
        var int i, j;
        var int w, h;
        var Vector shift;
        let w = f.getWidth();
        let h = f.getHeight();
        let shift = FieldDrawer.getShift(f);
        let i = 0;
        do Screen.setColor(true);
        while (i < (w + 1)){
            do Screen.drawLine(
                i * fieldCellSize + shift[0],
                shift[1],
                i * fieldCellSize + shift[0],
                h * fieldCellSize + shift[1]
            );
            let i = i + 1;
        }
        let j = 0;
        while (j < (h + 1)){
            do Screen.drawLine(
                shift[0],
                j * fieldCellSize + shift[1],
                w * fieldCellSize + shift[0],
                j * fieldCellSize + shift[1]
            );
            let j = j + 1;
        }
        do shift.dispose();
        return;
    }

    function void drawSnake(Field f, Snake s){
        var SnakeSegment curr, prev;
        let curr = s.getTail();
        while (~(curr.getPrev() = curr)){
            let prev = curr.getPrev();
            do FieldDrawer.drawRect(f, curr.getPos(), prev.getPos(), 2, true);
            let curr = prev;
        }
        do FieldDrawer.drawSquare(f, curr.getPos(), 2, true);
        return;
    }

    function void drawApple(Field f, Vector pos){
        var Vector shift;
        let shift = FieldDrawer.getShift(f);
        do Screen.setColor(true);
        do Screen.drawCircle(
            pos[0] * fieldCellSize + Math.divide(fieldCellSize, 2) + shift[0],
            pos[1] * fieldCellSize + Math.divide(fieldCellSize, 2) + shift[1],
            Math.divide(fieldCellSize, 3)
        );
        do shift.dispose();
        return;
    }

    function void drawSquare(Field f, Vector pos, int padding, boolean color){
        var Vector shift;
        let shift = FieldDrawer.getShift(f);
        do Screen.setColor(color);
        do Screen.drawRectangle(
            pos[0] * fieldCellSize + padding + shift[0],
            pos[1] * fieldCellSize + padding + shift[1],
            pos[0] * fieldCellSize + fieldCellSize - padding + shift[0],
            pos[1] * fieldCellSize + fieldCellSize - padding + shift[1]
        );
        do shift.dispose();
        return;
    }

    function void drawRect(Field f, Vector pos1, Vector pos2, int padding, boolean color){
        var Vector shift, min, max;
        let shift = FieldDrawer.getShift(f);
        let min = pos1.min(pos2);
        let max = pos1.max(pos2);
        do Screen.setColor(color);
        do Screen.drawRectangle(
            min[0] * fieldCellSize + padding + shift[0],
            min[1] * fieldCellSize + padding + shift[1],
            max[0] * fieldCellSize + fieldCellSize - padding + shift[0],
            max[1] * fieldCellSize + fieldCellSize - padding + shift[1]
        );
        do min.dispose();
        do max.dispose();
        do shift.dispose();
        return;
    }

    function Vector getShift(Field f){
        var int sx, sy;
        let sx = centerX - Math.divide(f.getWidth() * fieldCellSize, 2);
        let sy = centerY - Math.divide(f.getHeight() * fieldCellSize, 2);
        return Vector.new(sx, sy);
    }
}
